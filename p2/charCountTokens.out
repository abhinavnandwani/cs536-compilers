struct     (Line: 1, Char: 1)
Point      (Line: 1, Char: 8)
{          (Line: 1, Char: 14)
integer    (Line: 2, Char: 5)
x          (Line: 2, Char: 13)
,          (Line: 2, Char: 14)
y          (Line: 2, Char: 16)
}          (Line: 3, Char: 1)
void       (Line: 5, Char: 1)
move       (Line: 5, Char: 6)
(          (Line: 5, Char: 10)
Point      (Line: 5, Char: 11)
p          (Line: 5, Char: 17)
,          (Line: 5, Char: 18)
integer    (Line: 5, Char: 20)
dx         (Line: 5, Char: 28)
,          (Line: 5, Char: 30)
integer    (Line: 5, Char: 32)
dy         (Line: 5, Char: 40)
)          (Line: 5, Char: 42)
{          (Line: 5, Char: 44)
p          (Line: 6, Char: 5)
.          (Line: 6, Char: 6)
x          (Line: 6, Char: 7)
=          (Line: 6, Char: 9)
p          (Line: 6, Char: 11)
.          (Line: 6, Char: 12)
x          (Line: 6, Char: 13)
+          (Line: 6, Char: 15)
dx         (Line: 6, Char: 17)
p          (Line: 7, Char: 5)
.          (Line: 7, Char: 6)
y          (Line: 7, Char: 7)
=          (Line: 7, Char: 9)
p          (Line: 7, Char: 11)
.          (Line: 7, Char: 12)
y          (Line: 7, Char: 13)
+          (Line: 7, Char: 15)
dy         (Line: 7, Char: 17)
}          (Line: 8, Char: 1)
boolean    (Line: 10, Char: 1)
isEqual    (Line: 10, Char: 9)
(          (Line: 10, Char: 16)
Point      (Line: 10, Char: 17)
a          (Line: 10, Char: 23)
,          (Line: 10, Char: 24)
Point      (Line: 10, Char: 26)
b          (Line: 10, Char: 32)
)          (Line: 10, Char: 33)
{          (Line: 10, Char: 35)
if         (Line: 11, Char: 5)
(          (Line: 11, Char: 8)
a          (Line: 11, Char: 9)
.          (Line: 11, Char: 10)
x          (Line: 11, Char: 11)
==         (Line: 11, Char: 13)
b          (Line: 11, Char: 16)
.          (Line: 11, Char: 17)
x          (Line: 11, Char: 18)
&          (Line: 11, Char: 20)
&          (Line: 11, Char: 21)
a          (Line: 11, Char: 23)
.          (Line: 11, Char: 24)
y          (Line: 11, Char: 25)
==         (Line: 11, Char: 27)
b          (Line: 11, Char: 30)
.          (Line: 11, Char: 31)
y          (Line: 11, Char: 32)
)          (Line: 11, Char: 33)
{          (Line: 11, Char: 35)
return     (Line: 12, Char: 9)
TRUE       (Line: 12, Char: 16)
}          (Line: 13, Char: 5)
else       (Line: 13, Char: 7)
{          (Line: 13, Char: 12)
return     (Line: 14, Char: 9)
FALSE      (Line: 14, Char: 16)
}          (Line: 15, Char: 5)
}          (Line: 16, Char: 1)
void       (Line: 18, Char: 1)
main       (Line: 18, Char: 6)
(          (Line: 18, Char: 10)
)          (Line: 18, Char: 11)
{          (Line: 18, Char: 13)
Point      (Line: 19, Char: 5)
pt1        (Line: 19, Char: 11)
Point      (Line: 20, Char: 5)
pt2        (Line: 20, Char: 11)
pt1        (Line: 21, Char: 5)
.          (Line: 21, Char: 8)
x          (Line: 21, Char: 9)
=          (Line: 21, Char: 11)
10         (Line: 21, Char: 13)
pt1        (Line: 22, Char: 5)
.          (Line: 22, Char: 8)
y          (Line: 22, Char: 9)
=          (Line: 22, Char: 11)
20         (Line: 22, Char: 13)
pt2        (Line: 23, Char: 5)
.          (Line: 23, Char: 8)
x          (Line: 23, Char: 9)
=          (Line: 23, Char: 11)
10         (Line: 23, Char: 13)
pt2        (Line: 24, Char: 5)
.          (Line: 24, Char: 8)
y          (Line: 24, Char: 9)
=          (Line: 24, Char: 11)
20         (Line: 24, Char: 13)
disp       (Line: 25, Char: 5)
(          (Line: 25, Char: 9)
"Before move: (" (Line: 25, Char: 10)
+          (Line: 25, Char: 27)
pt1        (Line: 25, Char: 29)
.          (Line: 25, Char: 32)
x          (Line: 25, Char: 33)
+          (Line: 25, Char: 35)
", "       (Line: 25, Char: 37)
+          (Line: 25, Char: 42)
pt1        (Line: 25, Char: 44)
.          (Line: 25, Char: 47)
y          (Line: 25, Char: 48)
+          (Line: 25, Char: 50)
")"        (Line: 25, Char: 52)
)          (Line: 25, Char: 55)
move       (Line: 26, Char: 5)
(          (Line: 26, Char: 9)
pt1        (Line: 26, Char: 10)
,          (Line: 26, Char: 13)
5          (Line: 26, Char: 15)
,          (Line: 26, Char: 16)
-          (Line: 26, Char: 18)
5          (Line: 26, Char: 19)
)          (Line: 26, Char: 20)
pt1        (Line: 27, Char: 5)
.          (Line: 27, Char: 8)
x          (Line: 27, Char: 9)
++         (Line: 27, Char: 10)
pt1        (Line: 28, Char: 5)
.          (Line: 28, Char: 8)
y          (Line: 28, Char: 9)
--         (Line: 28, Char: 10)
if         (Line: 29, Char: 5)
(          (Line: 29, Char: 8)
isEqual    (Line: 29, Char: 9)
(          (Line: 29, Char: 16)
pt1        (Line: 29, Char: 17)
,          (Line: 29, Char: 20)
pt2        (Line: 29, Char: 22)
)          (Line: 29, Char: 25)
)          (Line: 29, Char: 26)
{          (Line: 29, Char: 28)
disp       (Line: 30, Char: 9)
(          (Line: 30, Char: 13)
"Points are equal." (Line: 30, Char: 14)
)          (Line: 30, Char: 33)
}          (Line: 31, Char: 5)
else       (Line: 31, Char: 7)
{          (Line: 31, Char: 12)
disp       (Line: 32, Char: 9)
(          (Line: 32, Char: 13)
"Points are not equal." (Line: 32, Char: 14)
)          (Line: 32, Char: 37)
}          (Line: 33, Char: 5)
while      (Line: 35, Char: 5)
(          (Line: 35, Char: 11)
pt1        (Line: 35, Char: 12)
.          (Line: 35, Char: 15)
x          (Line: 35, Char: 16)
<          (Line: 35, Char: 18)
30         (Line: 35, Char: 20)
)          (Line: 35, Char: 22)
{          (Line: 35, Char: 24)
pt1        (Line: 36, Char: 9)
.          (Line: 36, Char: 12)
x          (Line: 36, Char: 13)
=          (Line: 36, Char: 15)
pt1        (Line: 36, Char: 17)
.          (Line: 36, Char: 20)
x          (Line: 36, Char: 21)
+          (Line: 36, Char: 23)
1          (Line: 36, Char: 25)
}          (Line: 37, Char: 5)
integer    (Line: 39, Char: 5)
array      (Line: 39, Char: 13)
[          (Line: 39, Char: 18)
3          (Line: 39, Char: 19)
]          (Line: 39, Char: 20)
array      (Line: 40, Char: 5)
[          (Line: 40, Char: 10)
0          (Line: 40, Char: 11)
]          (Line: 40, Char: 12)
=          (Line: 40, Char: 14)
100        (Line: 40, Char: 16)
array      (Line: 41, Char: 5)
[          (Line: 41, Char: 10)
1          (Line: 41, Char: 11)
]          (Line: 41, Char: 12)
=          (Line: 41, Char: 14)
array      (Line: 41, Char: 16)
[          (Line: 41, Char: 21)
0          (Line: 41, Char: 22)
]          (Line: 41, Char: 23)
/          (Line: 41, Char: 25)
2          (Line: 41, Char: 27)
array      (Line: 42, Char: 5)
[          (Line: 42, Char: 10)
2          (Line: 42, Char: 11)
]          (Line: 42, Char: 12)
=          (Line: 42, Char: 14)
array      (Line: 42, Char: 16)
[          (Line: 42, Char: 21)
1          (Line: 42, Char: 22)
]          (Line: 42, Char: 23)
*          (Line: 42, Char: 25)
3          (Line: 42, Char: 27)
disp       (Line: 44, Char: 5)
(          (Line: 44, Char: 9)
"Final point: (" (Line: 44, Char: 10)
+          (Line: 44, Char: 27)
pt1        (Line: 44, Char: 29)
.          (Line: 44, Char: 32)
x          (Line: 44, Char: 33)
+          (Line: 44, Char: 35)
", "       (Line: 44, Char: 37)
+          (Line: 44, Char: 42)
pt1        (Line: 44, Char: 44)
.          (Line: 44, Char: 47)
y          (Line: 44, Char: 48)
+          (Line: 44, Char: 50)
")"        (Line: 44, Char: 52)
)          (Line: 44, Char: 55)
input      (Line: 45, Char: 5)
}          (Line: 46, Char: 1)
input      (Line: 48, Char: 1)
->         (Line: 48, Char: 7)
<-         (Line: 48, Char: 10)
++         (Line: 48, Char: 13)
--         (Line: 48, Char: 16)
+          (Line: 48, Char: 19)
-          (Line: 48, Char: 21)
*          (Line: 48, Char: 23)
/          (Line: 48, Char: 25)
^          (Line: 48, Char: 27)
&          (Line: 48, Char: 29)
|          (Line: 48, Char: 31)
==         (Line: 48, Char: 33)
^=         (Line: 48, Char: 36)
<          (Line: 48, Char: 39)
>          (Line: 48, Char: 41)
<=         (Line: 48, Char: 43)
>=         (Line: 48, Char: 46)
=          (Line: 48, Char: 49)
