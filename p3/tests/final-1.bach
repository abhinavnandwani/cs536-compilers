# The file below is the "mega test" file that combines all of your tests into one. 
# All comments have been preserved (using '#' for comments), and additional comments with expected output have been added for clarity.

# Combined Tests: All individual tests have been merged into one mega test file.
# Each test block has been renamed to avoid naming collisions.
# All comments use '#' and additional expected output comments have been added.

# -----------------------------------------------------------------------------
# Test Block 1: Basic Functions & Struct Operations
# -----------------------------------------------------------------------------
struct MyStruct [
    integer a.
    boolean b.
]

# Function Without Parameters:
# This function sets a local integer variable 'a' to 12.
void test1_printMessage [] [
    integer a.
    a = 12.
    # Expected: 'a' is assigned the value 12.
]

# Function That Modifies a Struct:
# This function modifies the struct by setting 'a' to 42 and 'b' to true.
void test1_modifyStruct [struct MyStruct s] [
    s:a = 42.
    s:b = true.
    # Expected: Struct 's' now has a = 42 and b = true.
]

# Function Declaration with Parameters and Return Type:
# This function returns the sum of its two integer parameters.
integer test1_addTwoNumbers [integer a, integer b] [
    integer sum.
    sum = a + b.
    # Expected: Returns the sum (a + b); for example, addTwoNumbers(10,20) should return 30.
    return sum.
]

# Main Function for Test Block 1:
void test1_main [] [
    # Variable Declarations
    integer x.
    boolean flag.
    struct MyStruct s.
    integer result.
    integer i.
    
    # Call function to add two numbers (10 and 20)
    result = test1_addTwoNumbers(10, 20).
    # Expected: result is 30.
    
    # Call function that performs an internal assignment (no display output)
    test1_printMessage().
    # Expected: Internally assigns a = 12.
    
    # Initialize struct 's'
    s:a = 5.
    s:b = false.
    # Expected: s is initialized with a = 5, b = false.
    
    # Modify the struct using a function
    test1_modifyStruct(s).
    # Expected: s is modified to have a = 42 and b = true.
    
    # Conditional check (no output)
    if (s:a > 0) {
        # Expected: Condition is true since s:a (42) > 0.
        # No display.
    } else {
        # No display.
    }
    
    # Nested If-Else:
    if (flag) {
        if (x == 10) {
            # Expected: Executes if flag is true and x equals 10.
        } else {
            # Expected: Executes if flag is true but x does not equal 10.
        }
    } else {
        # Expected: Executes if flag is false.
    }
    
    # Loop Example: Increment 'i' from 0 to 5.
    i = 0.
    while (i < 5) {
        i = i + 1.
        # Expected: Loop iterates 5 times, with i values: 0,1,2,3,4, then becomes 5.
    }
    
    return.
]

# -----------------------------------------------------------------------------
# Test Block 2: Ambiguous and Nested Conditionals, Loops, etc.
# -----------------------------------------------------------------------------
void test2_main [] [
    integer x.
    integer y.
    integer z.
    integer b.
    integer c.
    integer a.
    boolean flag.

    # Ambiguous If-Else with Arithmetic Precedence:
    if (b == -1) {
        x = 4+3*5-y.
    } else {
        x = 0.
    }
    # EXPECTED OUTPUT:
    # if (b == (-1)) {
    #     x = ((4 + (3 * 5)) - y).
    # } else {
    #     x = 0.
    # }
    
    # Nested If-Else with Operations:
    if (a < 10) {
        if (b >= 5) {
            c = b*a+4-2.
        } else {
            c = 0.
        }
    } else {
        c = -1.
    }
    # EXPECTED OUTPUT:
    # if (a < 10) {
    #     if (b >= 5) {
    #         c = (((b * a) + 4) - 2).
    #     } else {
    #         c = 0.
    #     }
    # } else {
    #     c = (-1).
    # }
    
    # While Loop with Nested Expressions:
    while (x < y+2*z) {
        x = x+1.
    }
    # EXPECTED OUTPUT:
    # while (x < (y + (2 * z))) {
    #     x = (x + 1).
    # }
    
    # While Loop with If-Else Inside:
    while (c) {
        if (x > y) {
            z = x - y.
        } else {
            z = y - x.
        }
    }
    # EXPECTED OUTPUT:
    # while (c) {
    #     if (x > y) {
    #         z = (x - y).
    #     } else {
    #         z = (y - x).
    #     }
    # }
    
    # Deeply Nested If-Else-While:
    if (flag) {
        if (x < 0) {
            y = -x.
        } else {
            while (y > 0) {
                y = y - 1.
            }
        }
    } else {
        x = x * 2.
    }
    # EXPECTED OUTPUT:
    # if (flag) {
    #     if (x < 0) {
    #         y = (-x).
    #     } else {
    #         while (y > 0) {
    #             y = (y - 1).
    #         }
    #     }
    # } else {
    #     x = (x * 2).
    # }
    
    return.
]

# -----------------------------------------------------------------------------
# Test Block 3: Node Structure, Basic Arithmetic, If-Else & Loops
# -----------------------------------------------------------------------------
# Struct Declaration for Node in Test Block 3
struct NodeT3 [
    integer value.
    struct NodeT3 next.
]

# Function: Sum of two numbers.
integer test3_sum [integer a, integer b] [
    integer result.
    result = a + b.
    # Expected: Returns the sum of a and b.
    return result.
]

# Function: Check if a number is zero.
boolean test3_isZero [integer x] [
    # Expected: Returns true if x is 0, false otherwise.
    return (x == 0).
]

# Function: Print Message "Hello, Bach!".
void test3_printMessage [] [
    disp <- "Hello, Bach!".
    # Expected Output: "Hello, Bach!" is displayed.
]

# Main Function for Test Block 3:
void test3_main [] [
    integer x.
    boolean flag.
    struct NodeT3 ptr.

    # Variable Assignments:
    x = 5.
    ptr:next:value = x * 2 - 1.
    # Expected: ptr:next:value = 5 * 2 - 1 = 9.
    
    flag = (x < 10) & (ptr:next:value > 0).
    # Expected: flag is true (5 < 10 and 9 > 0).
    
    # If-Else Statement:
    if (flag) { 
        x = x + 1.
        # Expected: x becomes 6.
    } else { 
        x = x - 1.
    }
    
    # Nested If-Else for modifying x:
    if (x > 0) { 
        if (x < 10) { 
            x = x * 2.
            # Expected: If x is between 1 and 9, it is doubled.
        } else { 
            x = x / 2.
        }
    } else { 
        x = -x.
    }
    
    # Check value of ptr:next:value:
    if (ptr:next:value == 5) { 
        disp <- "Matched!".
        # Expected Output: "Matched!" if ptr:next:value equals 5.
    } else { 
        disp <- "Not Matched!".
        # Expected Output: "Not Matched!" if condition is false.
    }
    
    # While Loop: Increment x until it reaches 10.
    while (x < 10) { 
        x = x + 1.
    }
    # Expected: x becomes 10.
    
    # While Loop: Decrement x while flag is true and x > 0.
    while (flag & (x > 0)) { 
        x = x - 1.
    }
    # Expected: x eventually becomes 0 if flag remains true.
    
    # While Loop with conditional increments/decrements:
    while (x) { 
        if (x < 5) { 
            x = x + 1.
        } else { 
            x = x - 1.
        }
    }
    # Expected: Loop terminates when x reaches 0.
    
    # Function Calls:
    x = test3_sum(3, 4).
    # Expected: x = 7.
    
    flag = test3_isZero(x - 7).
    # Expected: flag = true since (7 - 7) equals 0.
    
    test3_printMessage().
    # Expected Output: "Hello, Bach!" is displayed.
    
    # Nested If-Else inside a While Loop:
    while (x > 0) { 
        if (x / 2 == 0) { 
            disp <- "Even".
            # Expected Output: "Even" if x/2 equals 0.
        } else { 
            disp <- "Odd".
            # Expected Output: "Odd" otherwise.
        }
        x = x - 1.
    }
    
    # Input and Output Operations:
    input -> x.
    disp <- "Value of x is ".
    disp <- x.
    # Expected: The user input for x is displayed.
    
    return.
]

# -----------------------------------------------------------------------------
# Test Block 4: Node Operations, Recursion, & Complex Expressions
# -----------------------------------------------------------------------------
# Struct Declaration for Node in Test Block 4
struct NodeT4 [
    integer value.
    struct NodeT4 next.
]

# Function: Sum of two numbers.
integer test4_sum [integer x, integer y] [
    integer result.
    result = x + y.
    # Expected: Returns the sum of x and y.
    return result.
]

# Function: Check if a number is zero.
boolean test4_isZero [integer x] [
    # Expected: Returns true if x equals 0.
    return (x == 0).
]

# Function: Factorial using recursion.
integer test4_factorial [integer n] [
    if (n <= 1) {
        # Expected: For n <= 1, factorial is 1.
        return 1.
    } else {
        # Expected: n * factorial(n - 1)
        return (n * test4_factorial(n - 1)).
    }
]

# Function: Print Message "Hello, Bach!".
void test4_printMessage [] [
    disp <- "Hello, Bach!".
    # Expected Output: "Hello, Bach!" is displayed.
]

# Main Function for Test Block 4:
void test4_main [] [
    integer a.
    integer b.
    integer c.
    boolean flag.
    boolean check.
    struct NodeT4 ptr.
    struct NodeT4 temp.

    # Variable Assignments:
    a = 5.
    b = 10.
    c = test4_sum(a, b).
    # Expected: c = 15.
    
    ptr:value = 42.
    temp:next:value = c * 2 - 1.
    # Expected: temp:next:value = (15 * 2) - 1 = 29.
    
    flag = (a < b) & (temp:next:value > 10).
    # Expected: flag is true (5 < 10 and 29 > 10).
    
    check = ^ flag.
    # Expected: 'check' is the logical NOT of flag.
    
    a = (b + c) * 2 - 3 / 1.
    # Expected: Arithmetic precedence applies.
    
    flag = (a > 10) | (b < 20).
    # Expected: flag becomes true if either condition is met.
    
    # If-Else Statements:
    if (flag) { 
        a = a + 1.
        # Expected: Increment a if flag is true.
    } else { 
        a = a - 1.
    }
    
    if (a > 0) { 
        if (a < 10) { 
            a = a * 2.
            # Expected: If a is between 1 and 9, it is doubled.
        } else { 
            a = a / 2.
            # Expected: a is halved if 10 or more.
        }
    } else { 
        a = -a.
    }
    
    if (ptr:value == 42) { 
        disp <- "Correct Value!".
        # Expected Output: "Correct Value!" is displayed.
    } else { 
        disp <- "Incorrect Value!".
    }
    
    if (flag & (a > 2) | (b < 20)) {
        disp <- "Complex Boolean Expression!".
        # Expected Output: "Complex Boolean Expression!" if condition is met.
    }
    
    # While Loops:
    while (a < 15) { 
        a = a + 1.
    }
    # Expected: Loop until a reaches at least 15.
    
    while (flag & (a > 0)) { 
        a = a - 1.
    }
    # Expected: Loop decreases a until condition becomes false.
    
    while (a) { 
        if (a < 5) { 
            a = a + 1.
        } else { 
            a = a - 1.
        }
    }
    # Expected: Loop terminates when a becomes 0.
    
    # Function Calls:
    a = test4_sum(3, 4).
    # Expected: a = 7.
    
    flag = test4_isZero(a - 7).
    # Expected: flag = true (since 7 - 7 = 0).
    
    b = test4_factorial(5).
    # Expected: b = 120 (5 factorial).
    
    test4_printMessage().
    # Expected Output: "Hello, Bach!" is displayed.
    
    # Struct Assignments:
    ptr:value = 10.
    ptr:next = temp.
    ptr:next:value = ptr:value + 5.
    # Expected: ptr:next:value becomes 15.
    
    if (ptr:next:value == 15) {
        disp <- "Struct assignment works!".
        # Expected Output: "Struct assignment works!" is displayed.
    }
    
    # Nested If-Else for Even/Odd Check:
    if (a > 0) {
        if (a - (a / 2) * 2 == 0) {
            disp <- "Even number".
            # Expected Output: "Even number" if a is even.
        } else {
            disp <- "Odd number".
            # Expected Output: "Odd number" if a is odd.
        }
    } else {
        disp <- "Negative number or zero".
    }
    
    # Nested While Loops with a modulo-like test:
    while (b > 0) {
        disp <- "Outer loop iteration".
        while (b - (b / 2) * 2 ^= 0) {
            disp <- "Inner loop iteration".
            b = b - 1.
        }
        b = b - 1.
    }
    # Expected: Nested loops iterate while b > 0, printing messages accordingly.
    
    input -> a.
    disp <- "Value of a is ".
    disp <- a.
    # Expected: The user input for a is displayed.
    
    return.
]

# -----------------------------------------------------------------------------
# Test Block 5: Data Struct, Arithmetic, Recursion, & Mixed Expressions
# -----------------------------------------------------------------------------
# Struct Declaration for Data in Test Block 5
struct DataT5 [
    integer num.
    struct DataT5 next.
]

# Function: Add two numbers.
integer test5_add [integer x, integer y] [
    integer result.
    result = x + y.
    # Expected: Returns the sum of x and y.
    return result.
]

# Function: Multiply two numbers.
integer test5_multiply [integer x, integer y] [
    integer product.
    product = x * y.
    # Expected: Returns the product of x and y.
    return product.
]

# Function: Check equality of two integers.
boolean test5_isEqual [integer x, integer y] [
    # Expected: Returns true if x equals y.
    return (x == y).
]

# Function: Recursively compute the sum from n down to 1.
integer test5_recursiveSum [integer n] [
    if (n <= 0) {
        # Expected: Base case; return 0.
        return 0.
    } else {
        # Expected: n + recursiveSum(n - 1)
        return (n + test5_recursiveSum(n - 1)).
    }
]

# Function: Display a greeting.
void test5_greet [] [
    disp <- "Greetings from Bach!".
    # Expected Output: "Greetings from Bach!" is displayed.
]

# Main Function for Test Block 5:
void test5_main [] [
    integer a.
    integer b.
    integer c.
    integer d.
    integer e.
    boolean cond.
    struct DataT5 head.
    struct DataT5 second.

    # Arithmetic Operations:
    a = 7.
    b = 3.
    c = test5_add(a, b).
    # Expected: c = 10.
    d = a + b * c - 2.
    # Expected: d = 7 + (3 * 10) - 2 = 35.
    e = (a + b) * (c - 2).
    # Expected: e = (7+3)*(10-2) = 10 * 8 = 80.
    
    # Logical and Unary Operations:
    cond = (a < b) & (c > d) | (a == 7).
    # Expected: cond is true because (a == 7) is true.
    cond = ^ cond.
    # Expected: 'cond' becomes the logical NOT of the previous condition.
    
    # Chained Assignments:
    a = b = c = 42.
    # Expected: a, b, and c are all set to 42.
    
    # Struct Assignments:
    head:num = 100.
    head:next = second.
    second:num = head:num + 50.
    # Expected: second:num = 150.
    
    # Nested If-Else: Determine maximum among a, b, and c.
    if (a > b) {
        if (a > c) {
            d = a.
        } else {
            d = c.
        }
    } else {
        d = b.
    }
    # Expected: d = 42 since a, b, and c are all 42.
    
    # While Loop with a complex condition:
    while (d < 200 & cond) {
        d = d + 10.
    }
    # Expected: d increases by 10 until it reaches at least 200 or cond becomes false.
    
    # While Loop with Nested If-Else for odd/even check:
    while (a > 0) {
        disp <- "Outer loop iteration".
        while (a - (a / 2) * 2 ^= 0) {
            disp <- "Inner loop iteration: a is odd".
            a = a - 1.
        }
        a = a - 1.
    }
    # Expected: Iterates while a > 0, displaying messages for each iteration.
    
    # Function Calls and Recursion:
    b = test5_recursiveSum(5).
    # Expected: b = 15 (5 + 4 + 3 + 2 + 1).
    test5_greet().
    # Expected Output: "Greetings from Bach!" is displayed.
    
    a = test5_add(a, test5_multiply(b, d)).
    # Expected: a is assigned the result of adding a and (b multiplied by d).
    
    input -> a.
    disp <- "Final value of a is: ".
    disp <- a.
    # Expected: Displays the final value of a from user input.
    
    return.
]

# -----------------------------------------------------------------------------
# Final Combined Main: Calls all test main functions in sequence
# -----------------------------------------------------------------------------
void main [] [
    # Calling Test Block 1:
    test1_main().
    # Expected: Executes basic struct operations and function tests.
    
    # Calling Test Block 2:
    test2_main().
    # Expected: Executes ambiguous and nested conditionals and loops with expected outputs.
    
    # Calling Test Block 3:
    test3_main().
    # Expected: Executes Node structure operations and arithmetic tests.
    
    # Calling Test Block 4:
    test4_main().
    # Expected: Executes recursion, factorial, and complex node operations tests.
    
    # Calling Test Block 5:
    test5_main().
    # Expected: Executes data struct operations, arithmetic, recursion, and mixed expression tests.
    
    return.
]
