struct MyStruct [
    integer a.
    boolean b.
]
void test1_printMessage[] [
    integer a.
    a = 12.
]
void test1_modifyStruct[struct MyStruct s] [
    s:a = 42.
    s:b = true.
]
integer test1_addTwoNumbers[integer a, integer b] [
    integer sum.
    sum = (a + b).
    return sum.
]
void test1_main[] [
    integer x.
    boolean flag.
    struct MyStruct s.
    integer result.
    integer i.
    result = test1_addTwoNumbers(1020).
    test1_printMessage().
    s:a = 5.
    s:b = false.
    test1_modifyStruct(s).
    if ((s:a > 0)) {
    }
    else {
    }
    if (flag) {
        if ((x == 10)) {
        }
        else {
        }
    }
    else {
    }
    i = 0.
    while ((i < 5)) {
        i = (i + 1).
    }
    return.
]
void test2_main[] [
    integer x.
    integer y.
    integer z.
    integer b.
    integer c.
    integer a.
    boolean flag.
    if ((b == -1)) {
        x = ((4 + (3 * 5)) - y).
    }
    else {
        x = 0.
    }
    if ((a < 10)) {
        if ((b >= 5)) {
            c = (((b * a) + 4) - 2).
        }
        else {
            c = 0.
        }
    }
    else {
        c = -1.
    }
    while ((x < (y + (2 * z)))) {
        x = (x + 1).
    }
    while (c) {
        if ((x > y)) {
            z = (x - y).
        }
        else {
            z = (y - x).
        }
    }
    if (flag) {
        if ((x < 0)) {
            y = -x.
        }
        else {
            while ((y > 0)) {
                y = (y - 1).
            }
        }
    }
    else {
        x = (x * 2).
    }
    return.
]
struct NodeT3 [
    integer value.
    struct NodeT3 next.
]
integer test3_sum[integer a, integer b] [
    integer result.
    result = (a + b).
    return result.
]
boolean test3_isZero[integer x] [
    return (x == 0).
]
void test3_printMessage[] [
    disp <- "Hello, Bach!".
]
void test3_main[] [
    integer x.
    boolean flag.
    struct NodeT3 ptr.
    x = 5.
    ptr:next:value = ((x * 2) - 1).
    flag = ((x < 10) & (ptr:next:value > 0)).
    if (flag) {
        x = (x + 1).
    }
    else {
        x = (x - 1).
    }
    if ((x > 0)) {
        if ((x < 10)) {
            x = (x * 2).
        }
        else {
            x = (x / 2).
        }
    }
    else {
        x = -x.
    }
    if ((ptr:next:value == 5)) {
        disp <- "Matched!".
    }
    else {
        disp <- "Not Matched!".
    }
    while ((x < 10)) {
        x = (x + 1).
    }
    while ((flag & (x > 0))) {
        x = (x - 1).
    }
    while (x) {
        if ((x < 5)) {
            x = (x + 1).
        }
        else {
            x = (x - 1).
        }
    }
    x = test3_sum(34).
    flag = test3_isZero((x - 7)).
    test3_printMessage().
    while ((x > 0)) {
        if (((x / 2) == 0)) {
            disp <- "Even".
        }
        else {
            disp <- "Odd".
        }
        x = (x - 1).
    }
    input -> x.
    disp <- "Value of x is ".
    disp <- x.
    return.
]
struct NodeT4 [
    integer value.
    struct NodeT4 next.
]
integer test4_sum[integer x, integer y] [
    integer result.
    result = (x + y).
    return result.
]
boolean test4_isZero[integer x] [
    return (x == 0).
]
integer test4_factorial[integer n] [
    if ((n <= 1)) {
        return 1.
    }
    else {
        return (n * test4_factorial((n - 1))).
    }
]
void test4_printMessage[] [
    disp <- "Hello, Bach!".
]
void test4_main[] [
    integer a.
    integer b.
    integer c.
    boolean flag.
    boolean check.
    struct NodeT4 ptr.
    struct NodeT4 temp.
    a = 5.
    b = 10.
    c = test4_sum(ab).
    ptr:value = 42.
    temp:next:value = ((c * 2) - 1).
    flag = ((a < b) & (temp:next:value > 10)).
    check = (^flag).
    a = (((b + c) * 2) - (3 / 1)).
    flag = ((a > 10) | (b < 20)).
    if (flag) {
        a = (a + 1).
    }
    else {
        a = (a - 1).
    }
    if ((a > 0)) {
        if ((a < 10)) {
            a = (a * 2).
        }
        else {
            a = (a / 2).
        }
    }
    else {
        a = -a.
    }
    if ((ptr:value == 42)) {
        disp <- "Correct Value!".
    }
    else {
        disp <- "Incorrect Value!".
    }
    if (((flag & (a > 2)) | (b < 20))) {
        disp <- "Complex Boolean Expression!".
    }
    while ((a < 15)) {
        a = (a + 1).
    }
    while ((flag & (a > 0))) {
        a = (a - 1).
    }
    while (a) {
        if ((a < 5)) {
            a = (a + 1).
        }
        else {
            a = (a - 1).
        }
    }
    a = test4_sum(34).
    flag = test4_isZero((a - 7)).
    b = test4_factorial(5).
    test4_printMessage().
    ptr:value = 10.
    ptr:next = temp.
    ptr:next:value = (ptr:value + 5).
    if ((ptr:next:value == 15)) {
        disp <- "Struct assignment works!".
    }
    if ((a > 0)) {
        if (((a - ((a / 2) * 2)) == 0)) {
            disp <- "Even number".
        }
        else {
            disp <- "Odd number".
        }
    }
    else {
        disp <- "Negative number or zero".
    }
    while ((b > 0)) {
        disp <- "Outer loop iteration".
        while (((b - ((b / 2) * 2)) ^= 0)) {
            disp <- "Inner loop iteration".
            b = (b - 1).
        }
        b = (b - 1).
    }
    input -> a.
    disp <- "Value of a is ".
    disp <- a.
    return.
]
struct DataT5 [
    integer num.
    struct DataT5 next.
]
integer test5_add[integer x, integer y] [
    integer result.
    result = (x + y).
    return result.
]
integer test5_multiply[integer x, integer y] [
    integer product.
    product = (x * y).
    return product.
]
boolean test5_isEqual[integer x, integer y] [
    return (x == y).
]
integer test5_recursiveSum[integer n] [
    if ((n <= 0)) {
        return 0.
    }
    else {
        return (n + test5_recursiveSum((n - 1))).
    }
]
void test5_greet[] [
    disp <- "Greetings from Bach!".
]
void test5_main[] [
    integer a.
    integer b.
    integer c.
    integer d.
    integer e.
    boolean cond.
    struct DataT5 head.
    struct DataT5 second.
    a = 7.
    b = 3.
    c = test5_add(ab).
    d = ((a + (b * c)) - 2).
    e = ((a + b) * (c - 2)).
    cond = (((a < b) & (c > d)) | (a == 7)).
    cond = (^cond).
    a = (b = (c = 42)).
    head:num = 100.
    head:next = second.
    second:num = (head:num + 50).
    if ((a > b)) {
        if ((a > c)) {
            d = a.
        }
        else {
            d = c.
        }
    }
    else {
        d = b.
    }
    while (((d < 200) & cond)) {
        d = (d + 10).
    }
    while ((a > 0)) {
        disp <- "Outer loop iteration".
        while (((a - ((a / 2) * 2)) ^= 0)) {
            disp <- "Inner loop iteration: a is odd".
            a = (a - 1).
        }
        a = (a - 1).
    }
    b = test5_recursiveSum(5).
    test5_greet().
    a = test5_add(atest5_multiply(bd)).
    input -> a.
    disp <- "Final value of a is: ".
    disp <- a.
    return.
]
void test6_main[] [
    integer a.
    integer b.
    integer c.
    integer d.
    integer e.
    integer x.
    boolean flag.
    a = 10.
    b = 5.
    c = 20.
    d = 3.
    e = 2.
    flag = false.
    x = ((-a + ((b * -(c - d)) / e)) - (^flag)).
    disp <- "Edge Case Expression Result: ".
    disp <- x.
    return.
]
void test7_main[] [
    integer a.
    integer b.
    boolean flag.
    a = 3.
    b = 4.
    flag = (a < b).
    if (flag) {
        a = (a + b).
        while ((a > b)) {
            a = (a - 1).
        }
    }
    else {
        a = (a - b).
    }
    return.
]
void main[] [
    test1_main().
    test2_main().
    test3_main().
    test4_main().
    test5_main().
    test6_main().
    test7_main().
    return.
]
