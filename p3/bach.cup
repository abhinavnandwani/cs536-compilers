/**********************************************************************
 Java CUP specification for a parser for bach programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                BOOLEAN;
terminal                INTEGER;
terminal                VOID;
terminal                STRUCT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLIT;
terminal StrLitTokenVal STRINGLIT;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQUARE;
terminal                RSQUARE;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                EQUALS;
terminal                NOTEQ;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                READOP;
terminal                WRITEOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                RETURN;
terminal                INPUT;
terminal                DISPLAY;
terminal                IF;
terminal                ELSE;
terminal                WHILE;


/* Nonterminals */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FuncDeclNode     funcDecl;
non terminal FormalDeclNode   formalDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       formalsList;
non terminal FuncBodyNode     funcBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal ExpNode          exp;
non terminal AssignExpNode    assignExp;
non terminal CallExpNode      funcCall;
non terminal ExpNode          term;
non terminal LinkedList       actualList;
non terminal ExpNode          loc;
non terminal StructAccessExpNode structAccess;
non terminal LinkedList       structBody;


/* precedence and associativity declarations */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS,GREATER,LESSEQ,GREATEREQ,NOTEQ,EQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE; 
precedence right NOT;

//// start ////

start with program;


/* Grammar with actions */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;

decl            ::= funcDecl:f
                {: RESULT = f;
                :}
                ;

decl            ::= structDecl:s
                {: RESULT = s;
                :}
                ;

varDecl         ::= type:t id:i DOT
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_STRUCT);
                :}
                ;


// MY CODE

funcDecl ::= type:t id:i LSQUARE formalsList:fl RSQUARE funcBody:fb
          {: RESULT = new FuncDeclNode(t, i, new FormalsListNode(fl), fb); :}
          ;

structDecl ::= STRUCT id:i LSQUARE structBody:sb RSQUARE
      {: RESULT = new StructDeclNode(i, new DeclListNode(sb)); :}
      ;

structBody ::= structBody:sb varDecl:v
      {: sb.addLast(v); RESULT = sb; :}
      | varDecl:v
      {: RESULT = new LinkedList<VarDeclNode>(); RESULT.add(v); :}
      ;

formalDecl ::= type:t id:i
            {: RESULT = new FormalDeclNode(t, i); :}
            ;

stmtList ::= stmtList:sl stmt:s
          {: sl.addLast(s);
             RESULT = sl;
          :}
          | /* epsilon */
          {: RESULT = new LinkedList<StmtNode>(); 
          :}
          ;


formalsList ::= formalDecl:f
             {:
                 LinkedList<FormalDeclNode> fl = new LinkedList<>();
                 fl.add(f);
                 RESULT = fl;
             :}
             | formalsList:fl COMMA formalDecl:f
             {:
                 fl.addLast(f);
                 RESULT = fl;
             :}
             | /* epsilon */
             {:
                 RESULT = new LinkedList<FormalDeclNode>();
             :}
             ;

varDeclList ::= varDeclList:vl varDecl:v
             {: vl.addLast(v); RESULT = vl; :}
             | /* epsilon */
             {: RESULT = new LinkedList<VarDeclNode>(); :}
             ;


funcBody ::= LSQUARE varDeclList:vl stmtList:sl RSQUARE
      {: RESULT = new FuncBodyNode(new DeclListNode(vl), new StmtListNode(sl)); :}
      ;

funcCall ::= id:i LPAREN RPAREN
      {: RESULT = new CallExpNode(i); :}
      ;

funcCall ::= id:i LPAREN actualList:al RPAREN
      {: RESULT = new CallExpNode(i, new ExpListNode(al)); :}
      ;
actualList ::= exp:e
      {: RESULT = new LinkedList<ExpNode>(); RESULT.add(e); :}
      ;

actualList ::= actualList:al COMMA exp:e
      {: al.add(e); RESULT = al; :}
      ;

assignExp ::= loc:l ASSIGN exp:e
      {: RESULT = new AssignExpNode(l, e); :}
      ;



// assign statement
stmt ::= assignExp:ae DOT
      {: RESULT = new AssignStmtNode(ae); :}
      ;


// increment/decrement statements
stmt ::= loc:l PLUSPLUS DOT
      {: RESULT = new PostIncStmtNode(l); :}
      ;

stmt ::= loc:l MINUSMINUS DOT
      {: RESULT = new PostDecStmtNode(l); :}
      ;


// function calls
stmt ::= funcCall:fc DOT
      {: RESULT = new CallStmtNode(fc); :}
      ;



// return statements

stmt ::= RETURN exp:e DOT
      {: RESULT = new ReturnStmtNode(e); :}
      ;


stmt ::= RETURN DOT
      {: RESULT = new ReturnStmtNode(null); :}
      ;


// // something
stmt ::= INPUT READOP loc:l DOT
      {: RESULT = new ReadStmtNode(l); :}
      ;

stmt ::= DISPLAY WRITEOP exp:e DOT
      {: RESULT = new WriteStmtNode(e); :}
      ;


// loops and conditionals
stmt ::= WHILE LPAREN exp:e RPAREN LCURLY varDeclList:d stmtList:s RCURLY
   {: RESULT = new WhileStmtNode(e, new DeclListNode(d), new StmtListNode(s)); :}
   ;

stmt ::= IF LPAREN exp:e RPAREN LCURLY varDeclList:d stmtList:s RCURLY
   {: RESULT = new IfStmtNode(e, new DeclListNode(d), new StmtListNode(s)); :}
   ;

stmt ::= IF LPAREN exp:e RPAREN LCURLY varDeclList:d1 stmtList:s1 RCURLY 
         ELSE LCURLY varDeclList:d2 stmtList:s2 RCURLY
   {: RESULT = new IfElseStmtNode(e, new DeclListNode(d1), new StmtListNode(s1), new DeclListNode(d2), new StmtListNode(s2)); :}
   ;




// expressions //

// logical expressions

exp ::= assignExp:ae
     {: RESULT = ae; :}
     ;

exp ::= exp:e1 AND exp:e2
     {: RESULT = new AndNode(e1, e2); :}
     ;

exp ::= exp:e1 OR exp:e2
     {: RESULT = new OrNode(e1, e2); :}
     ;

exp ::= NOT exp:e
     {: RESULT = new NotNode(e); :}
     ;


// arithmetic expressions
exp ::= exp:e1 PLUS exp:e2
     {: RESULT = new PlusNode(e1, e2); :}
     ;

exp ::= exp:e1 MINUS exp:e2
     {: RESULT = new MinusNode(e1, e2); :}
     ;

exp ::= exp:e1 TIMES exp:e2
     {: RESULT = new TimesNode(e1, e2); :}
     ;

exp ::= exp:e1 DIVIDE exp:e2
     {: RESULT = new DivideNode(e1, e2); :}
     ;

exp ::= MINUS term:t
     {: RESULT = new UnaryMinusNode(t); :}
     ;


// comparsion expressions
exp ::= exp:e1 EQUALS exp:e2
     {: RESULT = new EqualsNode(e1, e2); :}
     ;

exp ::= exp:e1 NOTEQ exp:e2
     {: RESULT = new NotEqNode(e1, e2); :}
     ;

exp ::= exp:e1 GREATER exp:e2
     {: RESULT = new GreaterNode(e1, e2); :}
     ;

exp ::= exp:e1 GREATEREQ exp:e2
     {: RESULT = new GreaterEqNode(e1, e2); :}
     ;

exp ::= exp:e1 LESS exp:e2
     {: RESULT = new LessNode(e1, e2); :}
     ;

exp ::= exp:e1 LESSEQ exp:e2
     {: RESULT = new LessEqNode(e1, e2); :}
     ;

exp ::= term:t
      {: RESULT = t; :}
      ;

term ::= loc:l
      {: RESULT = l; :}
      ;

term ::= INTLIT:i
      {: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal); :}
      ;

term ::= STRINGLIT:s
      {: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal); :}
      ;

term ::= TRUE:t
      {: RESULT = new TrueNode(t.lineNum, t.charNum); :}
      ;

term ::= FALSE:f
      {: RESULT = new FalseNode(f.lineNum, f.charNum); :}
      ;

term ::= LPAREN exp:e RPAREN
      {: RESULT = e; :}
      ;

term ::= funcCall:c
      {: RESULT = c; :}
      ;


// type
type ::= BOOLEAN
      {: RESULT = new BooleanNode(); :}
      ;

type ::= INTEGER
      {: RESULT = new IntegerNode(); :}
      ;
type ::= VOID
      {: RESULT = new VoidNode(); :}
      ;

type ::= STRUCT id:i
      {: RESULT = new StructNode(i); :}
      ;
      
loc ::= id:i
      {: RESULT = i; :}
      ;

loc ::= structAccess:sa
      {: RESULT = sa; :}
      ;

structAccess ::= loc:l COLON id:i
      {: RESULT = new StructAccessExpNode(l, i); :}
      ;


// id
id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;
				