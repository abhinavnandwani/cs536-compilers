import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
	// fields
	int lineNum;
	int charNum;

	// constructor
	TokenVal(int lineNum, int charNum) {
		this.lineNum = lineNum;
		this.charNum = charNum;
	}
}

class IntLitTokenVal extends TokenVal {
	// new field: the value of the integer literal
	int intVal;

	// constructor
	IntLitTokenVal(int lineNum, int charNum, int intVal) {
		super(lineNum, charNum);
		this.intVal = intVal;
	}
}

class IdTokenVal extends TokenVal {
	// new field: the value of the identifier
	String idVal;

	// constructor
	IdTokenVal(int lineNum, int charNum, String idVal) {
		super(lineNum, charNum);
		this.idVal = idVal;
	}
}

class StrLitTokenVal extends TokenVal {
	// new field: the value of the string literal
	String strVal;

	// constructor
	StrLitTokenVal(int lineNum, int charNum, String strVal) {
		super(lineNum, charNum);
		this.strVal = strVal;
	}
}

// The following class is used to keep track of the character number at 
// which the current token starts on its line.
class CharNum {
	static int num = 1;
}
%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
LETTER=		  [a-zA-Z_]
VALID_ESC=    \\[nst'\"\\]  
BAD_ESC=      \\[^nst'\"\\]  
STR_CHAR=     ([^\"\\\n]|{VALID_ESC})* 
UNTERM_STR=   \"([^\"\\\n]|{VALID_ESC})*\n?   
BAD_STR=      \"([^\"\\\n]|{VALID_ESC})*{BAD_ESC}([^\"\\\n]|{VALID_ESC})*\"?$
BAD_UNTERM_STR= \"([^\"\\\n]|{BAD_ESC})*\n?  


%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);

%eofval}

%line

%%

\n        { CharNum.num = 1; }
{WHITESPACE}+  { CharNum.num += yytext().length(); }
%%.*        { CharNum.num += yytext().length(); }  
#.*         { CharNum.num += yytext().length(); }  

"void" { 
	Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
}

"boolean" { 
	Symbol S = new Symbol(sym.BOOLEAN, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
}

"integer" { 
	Symbol S = new Symbol(sym.INTEGER, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
}

"TRUE" { 
	Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
}

"FALSE" { 
	Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
}

"struct" {
    Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"input" {
    Symbol S = new Symbol(sym.INPUT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"disp" {
    Symbol S = new Symbol(sym.DISPLAY, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"if" {
    Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"else" {
    Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"while" {
    Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"return" {
    Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

({LETTER}({LETTER}|{DIGIT})*) {
	Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return S;
}

{DIGIT}+ {
    int intVal;
    try {
        long lval = Long.parseLong(yytext());
        if (lval > Integer.MAX_VALUE) {
            throw new NumberFormatException();
        }
        intVal = (int) lval;
    } catch (NumberFormatException e) {
        ErrMsg.warn(yyline+1, CharNum.num, "using max integer value: literal too large");
        intVal = Integer.MAX_VALUE;
    }
    Symbol S = new Symbol(sym.INTLIT,
                          new IntLitTokenVal(yyline+1, CharNum.num, intVal));
    CharNum.num += yytext().length();
    return S;
}


\"{STR_CHAR}\" {
    Symbol S = new Symbol(sym.STRINGLIT, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return S;
}

{UNTERM_STR} {
    ErrMsg.fatal(yyline+1, CharNum.num, "ignoring string literal: unterminated");
	return next_token();
}

{BAD_UNTERM_STR} {
    ErrMsg.fatal(yyline+1, CharNum.num, "ignoring string literal: contains bad escaped character and unterminated");
	return next_token();
}

{BAD_STR} {
    ErrMsg.fatal(yyline+1, CharNum.num, "ignoring string literal: contains bad escaped character");
	return next_token();
}





"{"      { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"}"      { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"("      { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
")"      { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"["      { Symbol S = new Symbol(sym.LSQUARE, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"]"      { Symbol S = new Symbol(sym.RSQUARE, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
":"      { Symbol S = new Symbol(sym.COLON, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
","      { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"."      { Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"+"      { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"-"      { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"*"      { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"/"      { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"<"      { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
">"      { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S;  }
"|"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S;  }
"="      { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }
"^"      { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num)); CharNum.num++; return S; }

"=="     { Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
"<="     { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
">="     { Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
"^="     { Symbol S = new Symbol(sym.NOTEQ, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
"++"     { Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
"--"     { Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
"->"     { Symbol S = new Symbol(sym.READOP, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }
"<-"     { Symbol S = new Symbol(sym.WRITEOP, new TokenVal(yyline+1, CharNum.num)); CharNum.num += yytext().length(); return S; }



. { 
	ErrMsg.fatal(yyline+1, CharNum.num, "ignoring illegal character: " + yytext());
	CharNum.num++;
	
}
